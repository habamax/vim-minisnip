*minisnip.txt*  Plugin for using TextMate-style snippets in Vim.

minisnip                                       *snippet* *snippets* *minisnip*

|minisnip-description|   Description
|minisnip-syntax|        Snippet syntax
|minisnip-usage|         Usage
|minisnip-settings|      Settings
|minisnip-features|      Features
|minisnip-disadvantages| Disadvantages to TextMate
|minisnip-contact|       Contact
|minisnip-license|       License

For Vim version 7.0 or later.
This plugin only works if 'compatible' is not set.
{Vi does not have any of these features.}

==============================================================================
DESCRIPTION                                             *minisnip-description*

minisnip.vim implements some of TextMate's snippets features in Vim. A
snippet is a piece of often-typed text that you can insert into your
document using a trigger word followed by a <Tab>.

==============================================================================
SYNTAX                                                        *snippet-syntax*

Snippets can be defined in two ways. They can be in their own file, named
after their trigger in 'snippets/<filetype>/<trigger>.snippet', or they can be
defined together in a 'snippets/<filetype>.snippets' file. Note that dotted
'filetype' syntax is supported -- e.g., you can use >

	:set ft=html.eruby

to activate snippets for both HTML and eRuby for the current file.

The syntax for snippets in *.snippets files is the following: >

 snippet trigger
 	expanded text
	more expanded text

Note that the first hard tab after the snippet trigger is required, and not
expanded in the actual snippet. The syntax for *.snippet files is the same,
only without the trigger declaration and starting indentation.

Also note that snippets must be defined using hard tabs. They can be expanded
to spaces later if desired (see |minisnip-indenting|).

"#" is used as a line-comment character in *.snippets files; however, they can
only be used outside of a snippet declaration. E.g.: >

 # this is a correct comment
 snippet trigger
 	expanded text
 snippet another_trigger
 	# this isn't a comment!
	expanded text
<
This should hopefully be obvious with the included syntax highlighting.

                                                               *minisnip-${#}*
Tab stops ~

By default, the cursor is placed at the end of a snippet. To specify where the
cursor is to be placed next, use "${#}", where the # is the number of the tab
stop. E.g., to place the cursor first on the id of a <div> tag, and then allow
the user to press <Tab> to go to the middle of it:
 >
 snippet div
 	<div id="${1}">
		${2}
	</div>
<
                        *minisnip-placeholders* *minisnip-${#:}* *minisnip-$#*
Placeholders ~

Placeholder text can be supplied using "${#:text}", where # is the number of
the tab stop. This text then can be copied throughout the snippet using "$#",
given # is the same number as used before. So, to make a C for loop: >

 snippet for
 	for (${2:i}; $2 < ${1:count}; $1++) {
		${4}
	}

This will cause "count" to first be selected and change if the user starts
typing. When <Tab> is pressed, the "i" in ${2}'s position will be selected;
all $2 variables will default to "i" and automatically be updated if the user
starts typing.
NOTE: "$#" syntax is used only for variables, not for tab stops as in TextMate.

Variables within variables are also possible. For instance: >

 snippet opt
 	<option value="${1:option}">${2:$1}</option>

Will, as usual, cause "option" to first be selected and update all the $1
variables if the user starts typing. Since one of these variables is inside of
${2}, this text will then be used as a placeholder for the next tab stop,
allowing the user to change it if he wishes.

To copy a value throughout a snippet without supplying default text, simply
use the "${#:}" construct without the text; e.g.: >

 snippet foo
 	${1:}bar$1
<                                                                *minisnip-eval*
Interpolated Vim Script ~

Snippets can also contain Vim script commands that are executed (via |eval()|)
when the snippet is inserted. Commands are given inside backticks (`...`); for
TextMates's functionality, use the |system()| function. E.g.: >

 snippet date
 	`system("date +%Y-%m-%d")`

will insert the current date, assuming you are on a Unix system. Note that you
can also (and should) use |strftime()| for this example.

                                                  *minisnip-multiple-triggers*
                                                         *minisnip-duplicates*
To specify that a snippet can have multiple matches in a *.snippets file, use
this syntax: >

 snippet trigger A description of snippet #1
 	expand this text
 snippet trigger A description of snippet #2
 	expand THIS text!

In this example, when "trigger<Tab>" is typed, a numbered menu containing all
of the descriptions of the "trigger" will be shown; when the user presses the
corresponding number, that snippet will then be expanded.

To create a snippet with multiple matches using *.snippet files,
simply place all the snippets in a subdirectory with the trigger name:
'snippets/<filetype>/<trigger>/<name>.snippet'.

==============================================================================
USAGE                                                         *minisnip-usage*

                                                 *'snippets'* *g:minisnip_dir*
Snippets are by default looked for any 'snippets' directory in your
'runtimepath'. Typically, it is located at '~/.vim/snippets/' on *nix or
'$HOME\vimfiles\snippets\' on Windows. To change that location or add another
one, change the "g:minisnip_dir" variable in your |.vimrc| to your preferred
directory.


USAGE                                                      *minisnip-commands*

Once you have edited your snippets they could be reloaded using following
commands:

                                                          *:MinisnipReloadAll*
:MinisnipReloadAll      Reload all snippets for all filetypes.


                                                          *:MinisnipReload*
:MinisnipReload         Reload snippets for a given filetype. Use current
                        filetype if no argument is supplied.

Use ':MinisnipReload _' to reload global snippets only.


                                             *minisnips-list* *i_CTRL-R_<Tab>*
If you would like to see what snippets are available, simply type <C-r><Tab>
in the current buffer to show a list via |popupmenu-completion|.

==============================================================================
SETTINGS                               *minisnip-expandtab* *minisnip-indenting*

If you would like your snippets to be expanded using spaces instead of tabs,
just enable 'expandtab' and set 'softtabstop' to your preferred amount of
spaces. If 'softtabstop' is not set, 'shiftwidth' is used instead.

                          *minisnip_default_maps* *minisnip-maps* *minisnip-remap*

To use default mappings:
>
 let g:minisnip_default_maps = 1

This would map <tab>, <s-tab> and <C-r><tab> in insert and select modes.

To map your own keys use <Plug> mappings:
>
 let g:minisnip_default_maps = 0
 imap <C-j> <Plug>(minisnipTrigger)
 smap <C-j> <Plug>(minisnipTrigger)
 imap <C-k> <Plug>(minisnipBackwards)
 smap <C-k> <Plug>(minisnipBackwards)
 imap <C-r><C-j> <Plug>(minisnipShowAvailable)

Where
 * <C-j> would trigger snippet or jump to the next placeholder;
 * <C-k> would jump to the previous placeholder;
 * <C-r><C-j> would show completion of available snippets.

==============================================================================
DISADVANTAGES                                         *minisnip-disadvantages*

minisnip.vim currently has the following disadvantages to TextMate's snippets:
    - There is no $0; the order of tab stops must be explicitly stated.
    - Placeholders within placeholders are not possible. E.g.: >

      '<div${1: id="${2:some_id}}">${3}</div>'
<
      In TextMate this would first highlight ' id="some_id"', and if
      you hit delete it would automatically skip ${2} and go to ${3}
      on the next <Tab>, but if you didn't delete it it would highlight
      "some_id" first. You cannot do this in minisnip.vim.
    - Regex cannot be performed on variables, such as "${1/.*/\U&}"
    - Placeholders cannot span multiple lines.
    - Activating snippets in different scopes of the same file is
      not possible.


==============================================================================
LICENSE                                                     *minisnip-license*

minisnip is released under the MIT license:

Copyright 2009-2010 Michael Sanders. All rights reserved.
Copyright 2021 Maxim Kim. Doesn't care about reservation of the rights.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

The software is provided "as is", without warranty of any kind, express or
implied, including but not limited to the warranties of merchantability,
fitness for a particular purpose and noninfringement. In no event shall the
authors or copyright holders be liable for any claim, damages or other
liability, whether in an action of contract, tort or otherwise, arising from,
out of or in connection with the software or the use or other dealings in the
software.

==============================================================================

vim:tw=78:ts=8:ft=help:norl:
